// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: user.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	User_SendSms_FullMethodName              = "/proto.User/SendSms"
	User_Login_FullMethodName                = "/proto.User/Login"
	User_CreateLogisticsOrder_FullMethodName = "/proto.User/CreateLogisticsOrder"
	User_GetWaybill_FullMethodName           = "/proto.User/GetWaybill"
	User_UpdateWaybillStatus_FullMethodName  = "/proto.User/UpdateWaybillStatus"
	User_UpdateWaybillInfo_FullMethodName    = "/proto.User/UpdateWaybillInfo"
	User_CancelWaybill_FullMethodName        = "/proto.User/CancelWaybill"
	User_GetWaybillTrack_FullMethodName      = "/proto.User/GetWaybillTrack"
	User_CalculateFreight_FullMethodName     = "/proto.User/CalculateFreight"
	User_BindWaybillResource_FullMethodName  = "/proto.User/BindWaybillResource"
	User_GetWaybillResources_FullMethodName  = "/proto.User/GetWaybillResources"
	User_ReportException_FullMethodName      = "/proto.User/ReportException"
)

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 运单创建接口
	CreateLogisticsOrder(ctx context.Context, in *CreateLogisticsOrderRequest, opts ...grpc.CallOption) (*CreateLogisticsOrderResponse, error)
	// 运单查询接口 (支持单条查询和条件查询，带分页)
	GetWaybill(ctx context.Context, in *GetWaybillRequest, opts ...grpc.CallOption) (*GetWaybillResponse, error)
	// 运单状态更新接口
	UpdateWaybillStatus(ctx context.Context, in *UpdateWaybillStatusRequest, opts ...grpc.CallOption) (*UpdateWaybillStatusResponse, error)
	// 运单信息修改接口
	UpdateWaybillInfo(ctx context.Context, in *UpdateWaybillInfoRequest, opts ...grpc.CallOption) (*UpdateWaybillInfoResponse, error)
	// 运单取消接口7
	CancelWaybill(ctx context.Context, in *CancelWaybillRequest, opts ...grpc.CallOption) (*CancelWaybillResponse, error)
	// 运单轨迹查询接口
	GetWaybillTrack(ctx context.Context, in *GetWaybillTrackRequest, opts ...grpc.CallOption) (*GetWaybillTrackResponse, error)
	// 运单费用计算接口
	CalculateFreight(ctx context.Context, in *CalculateFreightRequest, opts ...grpc.CallOption) (*CalculateFreightResponse, error)
	// 运单资源绑定接口 (绑定车辆和司机)
	BindWaybillResource(ctx context.Context, in *BindWaybillResourceRequest, opts ...grpc.CallOption) (*BindWaybillResourceResponse, error)
	// 查询运单资源接口 (查询绑定的车辆和司机信息)
	GetWaybillResources(ctx context.Context, in *GetWaybillResourcesRequest, opts ...grpc.CallOption) (*GetWaybillResourcesResponse, error)
	// 异常上报接口
	ReportException(ctx context.Context, in *ReportExceptionRequest, opts ...grpc.CallOption) (*ReportExceptionResponse, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) SendSms(ctx context.Context, in *SendSmsRequest, opts ...grpc.CallOption) (*SendSmsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendSmsResponse)
	err := c.cc.Invoke(ctx, User_SendSms_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, User_Login_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CreateLogisticsOrder(ctx context.Context, in *CreateLogisticsOrderRequest, opts ...grpc.CallOption) (*CreateLogisticsOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLogisticsOrderResponse)
	err := c.cc.Invoke(ctx, User_CreateLogisticsOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetWaybill(ctx context.Context, in *GetWaybillRequest, opts ...grpc.CallOption) (*GetWaybillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWaybillResponse)
	err := c.cc.Invoke(ctx, User_GetWaybill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateWaybillStatus(ctx context.Context, in *UpdateWaybillStatusRequest, opts ...grpc.CallOption) (*UpdateWaybillStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWaybillStatusResponse)
	err := c.cc.Invoke(ctx, User_UpdateWaybillStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UpdateWaybillInfo(ctx context.Context, in *UpdateWaybillInfoRequest, opts ...grpc.CallOption) (*UpdateWaybillInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateWaybillInfoResponse)
	err := c.cc.Invoke(ctx, User_UpdateWaybillInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CancelWaybill(ctx context.Context, in *CancelWaybillRequest, opts ...grpc.CallOption) (*CancelWaybillResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelWaybillResponse)
	err := c.cc.Invoke(ctx, User_CancelWaybill_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetWaybillTrack(ctx context.Context, in *GetWaybillTrackRequest, opts ...grpc.CallOption) (*GetWaybillTrackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWaybillTrackResponse)
	err := c.cc.Invoke(ctx, User_GetWaybillTrack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) CalculateFreight(ctx context.Context, in *CalculateFreightRequest, opts ...grpc.CallOption) (*CalculateFreightResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateFreightResponse)
	err := c.cc.Invoke(ctx, User_CalculateFreight_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) BindWaybillResource(ctx context.Context, in *BindWaybillResourceRequest, opts ...grpc.CallOption) (*BindWaybillResourceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BindWaybillResourceResponse)
	err := c.cc.Invoke(ctx, User_BindWaybillResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetWaybillResources(ctx context.Context, in *GetWaybillResourcesRequest, opts ...grpc.CallOption) (*GetWaybillResourcesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetWaybillResourcesResponse)
	err := c.cc.Invoke(ctx, User_GetWaybillResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) ReportException(ctx context.Context, in *ReportExceptionRequest, opts ...grpc.CallOption) (*ReportExceptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReportExceptionResponse)
	err := c.cc.Invoke(ctx, User_ReportException_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility.
type UserServer interface {
	SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error)
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// 运单创建接口
	CreateLogisticsOrder(context.Context, *CreateLogisticsOrderRequest) (*CreateLogisticsOrderResponse, error)
	// 运单查询接口 (支持单条查询和条件查询，带分页)
	GetWaybill(context.Context, *GetWaybillRequest) (*GetWaybillResponse, error)
	// 运单状态更新接口
	UpdateWaybillStatus(context.Context, *UpdateWaybillStatusRequest) (*UpdateWaybillStatusResponse, error)
	// 运单信息修改接口
	UpdateWaybillInfo(context.Context, *UpdateWaybillInfoRequest) (*UpdateWaybillInfoResponse, error)
	// 运单取消接口7
	CancelWaybill(context.Context, *CancelWaybillRequest) (*CancelWaybillResponse, error)
	// 运单轨迹查询接口
	GetWaybillTrack(context.Context, *GetWaybillTrackRequest) (*GetWaybillTrackResponse, error)
	// 运单费用计算接口
	CalculateFreight(context.Context, *CalculateFreightRequest) (*CalculateFreightResponse, error)
	// 运单资源绑定接口 (绑定车辆和司机)
	BindWaybillResource(context.Context, *BindWaybillResourceRequest) (*BindWaybillResourceResponse, error)
	// 查询运单资源接口 (查询绑定的车辆和司机信息)
	GetWaybillResources(context.Context, *GetWaybillResourcesRequest) (*GetWaybillResourcesResponse, error)
	// 异常上报接口
	ReportException(context.Context, *ReportExceptionRequest) (*ReportExceptionResponse, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServer struct{}

func (UnimplementedUserServer) SendSms(context.Context, *SendSmsRequest) (*SendSmsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendSms not implemented")
}
func (UnimplementedUserServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserServer) CreateLogisticsOrder(context.Context, *CreateLogisticsOrderRequest) (*CreateLogisticsOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogisticsOrder not implemented")
}
func (UnimplementedUserServer) GetWaybill(context.Context, *GetWaybillRequest) (*GetWaybillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaybill not implemented")
}
func (UnimplementedUserServer) UpdateWaybillStatus(context.Context, *UpdateWaybillStatusRequest) (*UpdateWaybillStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWaybillStatus not implemented")
}
func (UnimplementedUserServer) UpdateWaybillInfo(context.Context, *UpdateWaybillInfoRequest) (*UpdateWaybillInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWaybillInfo not implemented")
}
func (UnimplementedUserServer) CancelWaybill(context.Context, *CancelWaybillRequest) (*CancelWaybillResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelWaybill not implemented")
}
func (UnimplementedUserServer) GetWaybillTrack(context.Context, *GetWaybillTrackRequest) (*GetWaybillTrackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaybillTrack not implemented")
}
func (UnimplementedUserServer) CalculateFreight(context.Context, *CalculateFreightRequest) (*CalculateFreightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateFreight not implemented")
}
func (UnimplementedUserServer) BindWaybillResource(context.Context, *BindWaybillResourceRequest) (*BindWaybillResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindWaybillResource not implemented")
}
func (UnimplementedUserServer) GetWaybillResources(context.Context, *GetWaybillResourcesRequest) (*GetWaybillResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWaybillResources not implemented")
}
func (UnimplementedUserServer) ReportException(context.Context, *ReportExceptionRequest) (*ReportExceptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportException not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}
func (UnimplementedUserServer) testEmbeddedByValue()              {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	// If the following call pancis, it indicates UnimplementedUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_SendSms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendSmsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).SendSms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_SendSms_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).SendSms(ctx, req.(*SendSmsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CreateLogisticsOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogisticsOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CreateLogisticsOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CreateLogisticsOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CreateLogisticsOrder(ctx, req.(*CreateLogisticsOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetWaybill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWaybillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetWaybill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetWaybill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetWaybill(ctx, req.(*GetWaybillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateWaybillStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWaybillStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateWaybillStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateWaybillStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateWaybillStatus(ctx, req.(*UpdateWaybillStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UpdateWaybillInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWaybillInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UpdateWaybillInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_UpdateWaybillInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UpdateWaybillInfo(ctx, req.(*UpdateWaybillInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CancelWaybill_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelWaybillRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CancelWaybill(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CancelWaybill_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CancelWaybill(ctx, req.(*CancelWaybillRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetWaybillTrack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWaybillTrackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetWaybillTrack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetWaybillTrack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetWaybillTrack(ctx, req.(*GetWaybillTrackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_CalculateFreight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateFreightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).CalculateFreight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_CalculateFreight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).CalculateFreight(ctx, req.(*CalculateFreightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_BindWaybillResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BindWaybillResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).BindWaybillResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_BindWaybillResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).BindWaybillResource(ctx, req.(*BindWaybillResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetWaybillResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWaybillResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetWaybillResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_GetWaybillResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetWaybillResources(ctx, req.(*GetWaybillResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_ReportException_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportExceptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).ReportException(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: User_ReportException_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).ReportException(ctx, req.(*ReportExceptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendSms",
			Handler:    _User_SendSms_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _User_Login_Handler,
		},
		{
			MethodName: "CreateLogisticsOrder",
			Handler:    _User_CreateLogisticsOrder_Handler,
		},
		{
			MethodName: "GetWaybill",
			Handler:    _User_GetWaybill_Handler,
		},
		{
			MethodName: "UpdateWaybillStatus",
			Handler:    _User_UpdateWaybillStatus_Handler,
		},
		{
			MethodName: "UpdateWaybillInfo",
			Handler:    _User_UpdateWaybillInfo_Handler,
		},
		{
			MethodName: "CancelWaybill",
			Handler:    _User_CancelWaybill_Handler,
		},
		{
			MethodName: "GetWaybillTrack",
			Handler:    _User_GetWaybillTrack_Handler,
		},
		{
			MethodName: "CalculateFreight",
			Handler:    _User_CalculateFreight_Handler,
		},
		{
			MethodName: "BindWaybillResource",
			Handler:    _User_BindWaybillResource_Handler,
		},
		{
			MethodName: "GetWaybillResources",
			Handler:    _User_GetWaybillResources_Handler,
		},
		{
			MethodName: "ReportException",
			Handler:    _User_ReportException_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
